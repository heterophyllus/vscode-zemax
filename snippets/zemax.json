{
    "ABSO":{
        "prefix":"ABSO",
        "body":"ABSO(${1:x})",
        "description":"The absolute value"
    },
    "ACOS":{
        "prefix":"ACOS",
        "body":"ACOS(${1:x})",
        "description":"Arccosine in radians"
    },
    "APMN":{
        "prefix":"APMN",
        "body":"APMN(${1:surface})",
        "description":"The minimum radius value"
    },
    "APMX":{
        "prefix":"APMX",
        "body":"APMX(${1:surface})",
        "description":"The maximum radius value"
    },
    "APOI":{
        "prefix":"APOI",
        "body":"APOI(${1:px}, ${2:py})",
        "description":"Ray intensity apodization factor"
    },
    "APXD":{
        "prefix":"APXD",
        "body":"APXD(${1:surface})",
        "description":"The aperture x-decenter value"
    },
    "APYD":{
        "prefix":"APYD",
        "body":"APYD(${1:surface})",
        "description":"The aperture y-decenter value"
    },
    "APTP":{
        "prefix":"APTP",
        "body":"APTP(${1:surface})",
        "description":"An integer code describing the aperture type on the specified surface."
    },
    "ASIN":{
        "prefix":"ASIN",
        "body":"ASIN(${1:x})",
        "description":"Arcsine in radians"
    },
    "ASPR":{
        "prefix":"ASPR",
        "body":"ASPR()",
        "description":"Aspect ratio of the current graphic device"
    },
    "ATAN":{
        "prefix":"ATAN",
        "body":"ATAN(${1:x})",
        "description":"Arctangent in radians"
    },
    "ATYP":{
        "prefix":"ATYP",
        "body":"ATYP()",
        "description":"System aperture type code (EPD:0, F/#:1, NA:2, float by stop size:3)"
    },
    "AVAL":{
        "prefix":"AVAL",
        "body":"AVAL()",
        "description":"System aperture value"
    },
    "CALD":{
        "prefix":"CALD",
        "body":"CALD(${1:index})",
        "description":"Return value in specified CALLMACRO buffer"
    },
    "CHZN":{
        "prefix":"CHZN",
        "body":"CHZN(${1:x})",
        "description":"Chip Zone of surface"
    },
    "CONF":{
        "prefix":"CONF",
        "body":"CONF()",
        "description":"Returns the current configuration number"
    },
    "CONI":{
        "prefix":"CONI",
        "body":"CONI(${1:surface})",
        "description":"Conic constant of the surface."
    },
    "COSI":{
        "prefix":"COSI",
        "body":"COSI(${1:x})",
        "description":"Cosine"
    },
    "CURV":{
        "prefix":"CURV",
        "body":"CURV(${1:surface})",
        "description":"Curvature of the surface"
    },
    "EDGE":{
        "prefix":"EDGE",
        "body":"EDGE(${1:surface})",
        "description":"Edge thickness at the clear semi-diameter or semi-diameter of that surface"
    },
    "EOFF":{
        "prefix":"EOFF",
        "body":"EOFF()",
        "description":"End of file flag. Returns 1 if the end of file has been reached, otherwise returns 0."
    },
    "ETIM":{
        "prefix":"ETIM",
        "body":"ETIM()",
        "description":"The elapsed time in seconds since last TIMER."
    },
    "EXPE":{
        "prefix":"EXPE",
        "body":"EXPE(${1:x})",
        "description":"Exponents: e to the power of x"
    },
    "EXPT":{
        "prefix":"EXPT",
        "body":"EXPT(${1:x})",
        "description":"Exponents: 10 to the power of x"
    },
    "FICL":{
        "prefix":"FICL",
        "body":"FICL(${1:vec})",
        "description":"The fiber coupling efficiency"
    },
    "FLDX":{
        "prefix":"FLDX",
        "body":"FLDX(${1:field})",
        "description":"X angle or height of specified field"
    },
    "FLDY":{
        "prefix":"FLDY",
        "body":"FLDY(${1:field})",
        "description":"Y angle or height of specified field"
    },
    "FTAN":{
        "prefix":"FTAN",
        "body":"FTAN()",
        "description":"Tangential Angle of specified field"
    },
    "FTYP":{
        "prefix":"FTYP",
        "body":"FTYP()",
        "description":"The current field type"
    },
    "FVAN":{
        "prefix":"FVAN",
        "body":"FVAN(${1:field})",
        "description":"Vignetting angle of specified field"
    },
    "FVCX":{
        "prefix":"FVCX",
        "body":"FVCX(${1:field})",
        "description":"Vignetting compression (X)"
    },
    "FVCY":{
        "prefix":"FVCY",
        "body":"FVCY(${1:field})",
        "description":"Vignetting compression (Y)"
    },
    "FVDX":{
        "prefix":"FVDX",
        "body":"FVDX(${1:field})",
        "description":"Vignetting decenter (X)"
    },
    "FVDY":{
        "prefix":"FVDY",
        "body":"FVDY(${1:field})",
        "description":"Vignetting decenter (Y)"
    },
    "FWGT":{
        "prefix":"FWGT",
        "body":"FWGT(${1:field})",
        "description":"Field weighting of specified field"
    },
    "GABB":{
        "prefix":"GABB",
        "body":"GABB(${1:surface})",
        "description":"The glass catalog Abbe number of the glass for the specified surface"
    },
    "GAUS":{
        "prefix":"GAUS",
        "body":"GAUS(${1:stdev})",
        "description":"Returns a random value with a Gaussian distribution, zero mean, and the specified standard deviation"
    },
    "GETT":{
        "prefix":"GETT",
        "body":"GETT(${1:window},${2:line},${3:column})",
        "description":"Extracts a numerical value from any open text window"
    },
    "GETL":{
        "prefix":"GETL",
        "body":"GETL(${1:window},${2:line},${3:column})",
        "description":"Extracts a numerical value from any open text window. "
    },
    "GIND":{
        "prefix":"GIND",
        "body":"GIND(${1:surface})",
        "description":"The glass catalog d-light index of the glass for the specified surface"
    },
    "GLCA":{
        "prefix":"GLCA",
        "body":"GLCA(${1:surface})",
        "description":"Global vertex x vector of the specified surface"
    },
    "GLCB":{
        "prefix":"GLCB",
        "body":"GLCB(${1:surface})",
        "description":"Global vertex y vector of the specified surface"
    },
    "GLCC":{
        "prefix":"GLCC",
        "body":"GLCC(${1:surface})",
        "description":"Global vertex z vector of the specified surface"
    },
    "GLCM":{
        "prefix":"GLCM",
        "body":"GLCM(${1:surf},${2:item})",
        "description":"Global coordinate matrix"
    },
    "GLCX":{
        "prefix":"GLCX",
        "body":"GLCX(${1:surf})",
        "description":"Global vertex x-coordinate of the specified surface"
    },
    "GLCY":{
        "prefix":"GLCY",
        "body":"GLCY(${1:surf})",
        "description":"Global vertex y-coordinate of the specified surface"
    },
    "GLCZ":{
        "prefix":"GLCZ",
        "body":"GLCZ(${1:surf})",
        "description":"Global vertex z-coordinate of the specified surface"
    },
    "GNUM":{
        "prefix":"GNUM",
        "body":"GNUM(${1:str})",
        "description":"The number of the glass in the glass catalog"
    },
    "GPAR":{
        "prefix":"GPAR",
        "body":"GPAR(${1:surf})",
        "description":"The glass catalog partial dispersion coefficient of the glass for the specified surface"
    },
    "GRIN":{
        "prefix":"GRIN",
        "body":"GRIN(${1:s},${2:w},${3:x},${4:y},${5:z})",
        "description":"Returns the index of refraction at the specified x, y, z position on surface s at wavelength number w"
    },
    "GTEM":{
        "prefix":"GTEM",
        "body":"GTEM(${1:code})",
        "description":"Returns data from the Glass Substitution Template"
    },
    "IMAE":{
        "prefix":"IMAE",
        "body":"IMAE(${1:seed})",
        "description":"The geometrical image analysis efficiency"
    },
    "INDX":{
        "prefix":"INDX",
        "body":"INDX(${1:surf})",
        "description":"Index of refraction at the primary wavelength"
    },
    "INTE":{
        "prefix":"INTE",
        "body":"INTE(${1:x})",
        "description":"Returns the largest integer not greater than the argument"
    },
    "ISMS":{
        "prefix":"ISMS",
        "body":"ISMS(${1:surf})",
        "description":"Is mirror"
    },
    "LOGE":{
        "prefix":"LOGE",
        "body":"LOGE(${1:x})",
        "description":"Log base e of the expression"
    },
    "LOGT":{
        "prefix":"LOGT",
        "body":"LOGT(${1:x})",
        "description":"Log base ten of the expression"
    },
    "LOST":{
        "prefix":"LOST",
        "body":"LOST(${1:code})",
        "description":"The lost energy following the most recent NSTR trace"
    },
    "LVAL":{
        "prefix":"LVAL",
        "body":"LVAL(${1:A})",
        "description":"String value"
    },
    "MAGN":{
        "prefix":"MAGN",
        "body":"MAGN(${1:x},${2:y})",
        "description":"Computes the square root of x squared plus y squared"
    },
    "MAXF":{
        "prefix":"MAXF",
        "body":"MAXF()",
        "description":"The maximum radial angle in degrees, radial object height in lens units, or radial image height in lens units. "
    },
    "MAXG":{
        "prefix":"MAXG",
        "body":"MAXG()",
        "description":"The number of glasses currently loaded."
    },
    "MCON":{
        "prefix":"MCON",
        "body":"MCON(${1:row},${2:config},${3:data})",
        "description":"Extracts data from any row and configuration of the Multi-Configuration Editor"
    },
    "MCOP":{
        "prefix":"MCOP",
        "body":"MCOP(${1:row},${2:config})",
        "description":"Extracts data from any row and configuration of the Multi-Configuration Editor"
    },
    "MCSD":{
        "prefix":"MCSD",
        "body":"MCSD(${1:x})",
        "description":"Mechanical Semi-Diameter of surface"
    },
    "MFCN":{
        "prefix":"MFCN",
        "body":"MFCN()",
        "description":"MFCN updates the lens, validates the merit function, updates the merit function, then returns the current merit function value"
    },
    "NCON":{
        "prefix":"NCON",
        "body":"NCON()",
        "description":"Returns the number of configurations"
    },
    "NFLD":{
        "prefix":"NFLD",
        "body":"NFLD()",
        "description":"The number of defined fields"
    },
    "NOBJ":{
        "prefix":"NOBJ",
        "body":"NOBJ(${1:surf})",
        "description":"The number of object defined in the specified non-sequential surface"
    },
    "NPAR":{
        "prefix":"NPAR",
        "body":"NPAR(${1:surf},${2:object},${3:param})",
        "description":"Returns a value from the parameter columns of the non-sequential component editor"
    },
    "NPOS":{
        "prefix":"NPOS",
        "body":"NPOS(${1:surf},${2:object},${3:code})",
        "description":"Returns a value from the position columns of the non-sequential component editor"
    },
    "NPRO":{
        "prefix":"NPRO",
        "body":"NPRO(${1:surf},${2:object},${3:code},${4:face})",
        "description":"Returns a numeric or string value from the property pages of objects defined in the non-sequential components editor"
    },
    "NSDC":{
        "prefix":"NSDC",
        "body":"NSDC(${1:surf},${2:object},${3:pixel},${4:data})",
        "description":"The coherent intensity data from the specified pixel"
    },
    "NSDD":{
        "prefix":"NSDD",
        "body":"NSDD(${1:surf},${2:object},${3:pixel},${4:data})",
        "description":""
    },
    "NSDE":{
        "prefix":"NSDE",
        "body":"NSDE(${1:surf},${2:object},${3:pixel},${4:angle},${5:data})",
        "description":""
    },
    "NSDP":{
        "prefix":"NSDP",
        "body":"NSDP(${1:surf},${2:object},${3:pixel},${4:data})",
        "description":""
    },
    "NSUR":{
        "prefix":"NSUR",
        "body":"NSUR()",
        "description":"The number of defined surfaces"
    },
    "NWAV":{
        "prefix":"NWAV",
        "body":"NWAV()",
        "description":"The number of defined wavelengths"
    },
    "OBJC":{
        "prefix":"OBJC",
        "body":"OBJC(${1:str})",
        "description":"Object with comment"
    },
    "OCOD":{
        "prefix":"OCOD",
        "body":"OCOD(${1:str})",
        "description":"The optimization operand code number used by the OPEV function"
    },
    "ONUM":{
        "prefix":"ONUM",
        "body":"ONUM(${1:str})",
        "description":"The id number of the operand"
    },
    "OPDC":{
        "prefix":"OPDC",
        "body":"OPDC()",
        "description":"The optical path difference"
    },
    "OPER":{
        "prefix":"OPER",
        "body":"OPER(${1:row},${2:col})",
        "description":"Extracts data from any row and column of the Merit Function Editor"
    },
    "OPEV":{
        "prefix":"OPEV",
        "body":"OPEV(${1:code},${2:int1},${3:int2},${4:data1},${5:data2},${6:data3},${7:data4})",
        "description":"Computes the same value as any optimization operand would, without the need to add the operand to the merit function"
    },
    "OPEW":{
        "prefix":"OPEW",
        "body":"OPEW(${1:code},${2:int1},${3:int2},${4:data1},${5:data2},${6:data3},${7:data4},${8:data5},${9:data6})",
        "description":"This function is very similar to OPEV, the key difference being that OPEW supports two additional arguments"
    },
    "OPTH":{
        "prefix":"OPTH",
        "body":"OPTH(${1:surf})",
        "description":"The optical path length along the ray to the specified surface"
    },
    "PARM":{
        "prefix":"PARM",
        "body":"PARM(${1:n},${2:s})",
        "description":"Parameter n of the surface s"
    },
    "PIXX":{
        "prefix":"PIXX",
        "body":"PIXX(${1:str})",
        "description":"The number of X-direction pixels in the graphic"
    },
    "PIXY":{
        "prefix":"PIXY",
        "body":"PIXY(${1:str})",
        "description":"The number of Y-direction pixels in the graphic"
    },
    "PMOD":{
        "prefix":"PMOD",
        "body":"PMOD()",
        "description":"0 if paraxial mode is off, else 1."
    },
    "POWR":{
        "prefix":"POWR",
        "body":"POWR(${1:x},${2:y})",
        "description":"Computes the absolute value of x to the power of y"
    },
    "PVHX":{
        "prefix":"PVHX",
        "body":"PVHX()",
        "description":"Data1 parameter from the ZPLM optimization operand"
    },
    "PVHY":{
        "prefix":"PVHY",
        "body":"PVHY()",
        "description":"Data2 parameter from the ZPLM optimization operand"
    },
    "PVPX":{
        "prefix":"PVPX",
        "body":"PVPX()",
        "description":"Data3 parameter from the ZPLM optimization operand"
    },
    "PVPY":{
        "prefix":"PVPY",
        "body":"PVPY()",
        "description":"Data4 parameter from the ZPLM optimization operand"
    },
    "PWAV":{
        "prefix":"PWAV",
        "body":"PWAV()",
        "description":"The primary wavelength number"
    },
    "RADI":{
        "prefix":"RADI",
        "body":"RADI(${1:surf})",
        "description":"Radius of curvature of surface"
    },
    "RAGL":{
        "prefix":"RAGL",
        "body":"RAGL(${1:x})",
        "description":"The global X-direction cosine of the ray following the surface"
    },
    "RAGM":{
        "prefix":"RAGM",
        "body":"RAGM(${1:x})",
        "description":"The global Y-direction cosine of the ray following the surface"
    },
    "RAGN":{
        "prefix":"RAGN",
        "body":"RAGN(${1:x})",
        "description":"The global Z-direction cosine of the ray following the surface"
    },
    "RAGX":{
        "prefix":"RAGX",
        "body":"RAGX(${1:surf})",
        "description":"The global x coordinate of the ray intercept."
    },
    "RAGY":{
        "prefix":"RAGY",
        "body":"RAGY(${1:surf})",
        "description":"The global y coordinate of the ray intercept."
    },
    "RAGZ":{
        "prefix":"RAGZ",
        "body":"RAGZ(${1:surf})",
        "description":"The global z coordinate of the ray intercept."
    },
    "RAND":{
        "prefix":"RAND",
        "body":"RAND(${1:x})",
        "description":"Random floating point number uniformly distributed between 0 and the expression"
    },
    "RANX":{
        "prefix":"RANX",
        "body":"RANX(${1:surf})",
        "description":"The X-direction cosine of surface normal"
    },
    "RANY":{
        "prefix":"RANY",
        "body":"RANY(${1:surf})",
        "description":"The Y-direction cosine of surface normal"
    },
    "RANZ":{
        "prefix":"RANZ",
        "body":"RANZ(${1:surf})",
        "description":"The Z-direction cosine of surface normal"
    },
    "RAYE":{
        "prefix":"RAYE",
        "body":"RAYE()",
        "description":"The ray-trace error flag"
    },
    "RAYL":{
        "prefix":"RAYL",
        "body":"RAYL(${1:surf})",
        "description":"The X-direction cosine of the ray following the surface"
    },
    "RAYM":{
        "prefix":"RAYM",
        "body":"RAYM(${1:surf})",
        "description":"The Y-direction cosine of the ray following the surface"
    },
    "RAYN":{
        "prefix":"RAYN",
        "body":"RAYN(${1:surf})",
        "description":"The Z-direction cosine of the ray following the surface"
    },
    "RAYO":{
        "prefix":"RAYO",
        "body":"RAYO(${1:surf})",
        "description":"The ray optical path length from the previous surface to the specified surface"
    },
    "RAYT":{
        "prefix":"RAYT",
        "body":"RAYT(${1:surf})",
        "description":"The ray path length from the previous surface to the specified surface"
    },
    "RAYV":{
        "prefix":"RAYV",
        "body":"RAYV()",
        "description":"0 if ray was not vignetted, else vignetted surface number"
    },
    "RAYX":{
        "prefix":"RAYX",
        "body":"RAYX(${1:surf})",
        "description":"The X-coordinate of the ray intercept"
    },
    "RAYY":{
        "prefix":"RAYY",
        "body":"RAYY(${1:surf})",
        "description":"The Y-coordinate of the ray intercept"
    },
    "RAYZ":{
        "prefix":"RAYZ",
        "body":"RAYZ(${1:surf})",
        "description":"The Z-coordinate of the ray intercept"
    },
    "RELI":{
        "prefix":"RELI",
        "body":"RELI(${1:field})",
        "description":"Relative illumination for the specified field position"
    },
    "SAGG":{
        "prefix":"SAGG",
        "body":"SAGG(${1:x},${2:y},${3:z})",
        "description":"Computes the sag in lens units at the specified point on the surface"
    },
    "SCOM":{
        "prefix":"SCOM",
        "body":"SCOM(${1:A},${2:B})",
        "description":"If the strings are equal, SCOM returns 0"
    },
    "SDIA":{
        "prefix":"SDIA",
        "body":"SDIA(${1:surf})",
        "description":"Clear semi-diameter or Semi-diameter of surface"
    },
    "SIGN":{
        "prefix":"SIGN",
        "body":"SIGN(${1:x})",
        "description":"Returns -1 if the argument is less than zero, 0 if the argument is zero, and +1 if the argument is positive."
    },
    "SINE":{
        "prefix":"SINE",
        "body":"SINE(${1:x})",
        "description":"Sine"
    },
    "SLEN":{
        "prefix":"SLEN",
        "body":"SLEN(${1:str})",
        "description":"Length of the string"
    },
    "SOLM":{
        "prefix":"SOLM",
        "body":"SOLM(${1:operand}, ${2:config}, ${3:code})",
        "description":"The return value is data about the solve type and data for the specified multi configuration operand and configuration."
    },
    "SOLV":{
        "prefix":"SOLV",
        "body":"SOLV(${1:surf},${2:code},${3:param})",
        "description":"The return value is data about the solve type for the specified surface and data."
    },
    "SOSO":{
        "prefix":"SOSO",
        "body":"SOSO(${1:code})",
        "description":"Surface or object number of the current macro solve"
    },
    "SPRO":{
        "prefix":"SPRO",
        "body":"SPRO(${1:surf},${2:code})",
        "description":"Returns a numeric or string value from the property pages or editors of surfaces defined in the lens data editor"
    },
    "SPRX":{
        "prefix":"SPRX",
        "body":"SPRX(${1:surf},${2:code},${3:value2})",
        "description":"This function is similar to SPRO. The key difference is that SPRX supports one additional argument"
    },
    "SRCN":{
        "prefix":"SRCN",
        "body":"SRCN(${1:A},${2:n})",
        "description":"Surface matching comment #n."
    },
    "SQRT":{
        "prefix":"SQRT",
        "body":"SQRT(${1:x})",
        "description":"Square root"
    },
    "SURC":{
        "prefix":"SURC",
        "body":"SURC(${1:A$})",
        "description":"Surface with comment"
    },
    "SVAL":{
        "prefix":"SVAL",
        "body":"SVAL(${1:A$})",
        "description":"String value"
    },
    "SYPR":{
        "prefix":"SYPR",
        "body":"SYPR(${1:code})",
        "description":"Returns a numeric or string value for the corresponding system data"
    },
    "TANG":{
        "prefix":"TANG",
        "body":"TANG(${1:x})",
        "description":"Tangent"
    },
    "TMAS":{
        "prefix":"TMAS",
        "body":"TMAS()",
        "description":"The total mass in grams of the lens from surface 1 to the image surface"
    },
    "THIC":{
        "prefix":"THIC",
        "body":"THIC(${1:surf})",
        "description":"Thickness of the surface"
    },
    "TOLV":{
        "prefix":"TOLV",
        "body":"TOLV(${1:op},${2:col})",
        "description":"Returns a numeric or string value from the Tolerance Data Editor"
    },
    "UNIT":{
        "prefix":"UNIT",
        "body":"UNIT()",
        "description":"Returns 0, 1, 2, or 3, if the current unit type is millimeters, centimeters, inches, or meters, respectively"
    },
    "VEC1":{
        "prefix":"VEC1",
        "body":"VEC1(${1:x})",
        "description":"Returns the value of the array variable at the specified subscript"
    },
    "VEC2":{
        "prefix":"VEC2",
        "body":"VEC2(${1:x})",
        "description":"Returns the value of the array variable at the specified subscript"
    },
    "VEC3":{
        "prefix":"VEC3",
        "body":"VEC3(${1:x})",
        "description":"Returns the value of the array variable at the specified subscript"
    },
    "VEC4":{
        "prefix":"VEC4",
        "body":"VEC4(${1:x})",
        "description":"Returns the value of the array variable at the specified subscript"
    },
    "VERS":{
        "prefix":"VERS",
        "body":"VERS()",
        "description":"Returns the version of the OpticStudio program. The version is of the form yymmdd."
    },
    "WAVL":{
        "prefix":"WAVL",
        "body":"WAVL(${1:wav})",
        "description":"Wavelength in micrometer"
    },
    "WINL":{
        "prefix":"WINL",
        "body":"WINL()",
        "description":"Returns the number of the analysis window most recently opened by the keyword"
    },
    "WINN":{
        "prefix":"WINN",
        "body":"WINN()",
        "description":"Returns the number of open analysis windows."
    },
    "WWGT":{
        "prefix":"WWGT",
        "body":"WWGT(${1:wav})",
        "description":"Wavelength weighting"
    },
    "XMIN":{
        "prefix":"XMIN",
        "body":"XMIN()",
        "description":"Minimum X coordinate of the graphic window"
    },
    "XMAX":{
        "prefix":"XMAX",
        "body":"XMAX()",
        "description":"Maximum X coordinate of the graphic window"
    },
    "YMIN":{
        "prefix":"YMIN",
        "body":"YMIN()",
        "description":"Minimum Y coordinate of the graphic window"
    },
    "YMAX":{
        "prefix":"YMAX",
        "body":"YMAX()",
        "description":"Maximum Y coordinate of the graphic window"
    },



    "$BUFFER":{
        "prefix":"$BUFFER",
        "body":"\\$BUFFER()",
        "description":"Returns the current string in the lens buffer"
    },
    "$CALLSTR":{
        "prefix":"$CALLSTR",
        "body":"\\$CALLSTR(${1:i})",
        "description":"Returns the string from the CALLMACRO string buffer at index i"
    },
    "$COAT":{
        "prefix":"$COAT",
        "body":"\\$COAT(${1:i})",
        "description":"Returns the coating name for the ith surface"
    },
    "$COATINGPATH":{
        "prefix":"$COATINGPATH",
        "body":"\\$COATINGPATH()",
        "description":"Returns the path name for coating files"
    },
    "$COMMENT":{
        "prefix":"$COMMENT",
        "body":"\\$COMMENT(${1:i})",
        "description":"Returns the comment string for the ith surface"
    },
    "$DATAPATH":{
        "prefix":"$DATAPATH",
        "body":"\\$DATAPATH()",
        "description":"Returns the path name for data files"
    },
    "$DATE":{
        "prefix":"$DATE",
        "body":"\\$DATE()",
        "description":"Returns the current date and time string"
    },
    "$EXTENSIONPATH":{
        "prefix":"$EXTENSIONPATH",
        "body":"\\$EXTENSIONPATH()",
        "description":"Returns the path name for OpticStudio extensions"
    },
    "$FILENAME":{
        "prefix":"$FILENAME",
        "body":"\\$FILENAME()",
        "description":"Returns the current lens file name, without the path"
    },
    "$FILEPATH":{
        "prefix":"$FILEPATH",
        "body":"\\$FILEPATH()",
        "description":"Returns the current lens file name, with the complete path"
    },
    "$GETSTRING":{
        "prefix":"$GETSTRING",
        "body":"\\$GETSTRING(${1:str},${2:n})",
        "description":"Returns the nth sub-string for the string A$ using spaces for delimiters"
    },
    "$GETSTRINGC":{
        "prefix":"$GETSTRINGC",
        "body":"\\$GETSTRINGC(${1:str},${2:n})",
        "description":"Returns the nth sub-string for the string A$ using commas for delimiters"
    },
    "$GLASS":{
        "prefix":"$GLASS",
        "body":"\\$GLASS(${1:i})",
        "description":"Returns the glass name of surface number i"
    },
    "$GLASSCATALOG":{
        "prefix":"$GLASSCATALOG",
        "body":"\\$GLASSCATALOG(${1:i})",
        "description":"Returns the name of the ith loaded glass catalog for the current lens"
    },
    "GLASSPATH":{
        "prefix":"GLASSPATH",
        "body":"GLASSPATH()",
        "description":"Returns the path name for glass catalog files"
    },
    "$LEFTSTRING":{
        "prefix":"$LEFTSTRING",
        "body":"\\$LEFTSTRING(${1:A},${2:n})",
        "description":"Returns the left most n characters in the string A"
    },
    "$LENSNAME":{
        "prefix":"$LENSNAME",
        "body":"\\$LENSNAME()",
        "description":"Returns the lens title defined in the System Explorer"
    },
    "$MACROPATH":{
        "prefix":"$MACROPATH",
        "body":"\\$MACROPATH()",
        "description":"Returns the path name for macro files"
    },
    "$NOTE":{
        "prefix":"$NOTE",
        "body":"\\$NOTE(${1:line})",
        "description":"Returns the notes information defined in the System Explorer"
    },
    "$OBJECTPATH":{
        "prefix":"$OBJECTPATH",
        "body":"\\$OBJECTPATH()",
        "description":"Returns the path name for NSC object files"
    },
    "$PATHNAME":{
        "prefix":"$PATHNAME",
        "body":"\\$PATHNAME()",
        "description":"Returns the path name only for the current lens file"
    },
    "$PROGRAMPATH":{
        "prefix":"$PROGRAMPATH",
        "body":"\\$PROGRAMPATH()",
        "description":"Returns the path name for program files"
    },
    "$QUOTE":{
        "prefix":"$QUOTE",
        "body":"\\$QUOTE",
        "description":"Returns the double quote character"
    },
    "$RIGHTSTRING":{
        "prefix":"$RIGHTSTRING",
        "body":"\\$RIGHTSTRING(${1:A},${2:n})",
        "description":"Returns the right most n characters in the string A"
    },
    "$STR":{
        "prefix":"$STR",
        "body":"\\$STR(${1:expr})",
        "description":"Returns a string formatted using the format defined by the FORMAT keyword"
    },
    "$TAB":{
        "prefix":"$TAB",
        "body":"\\$TAB()",
        "description":"Returns the tab character"
    },
    "$TEMPFILENAME":{
        "prefix":"$TEMPFILENAME",
        "body":"\\$TEMPFILENAME()",
        "description":"Returns the name of a temporary file, with complete path"
    },
    "$TOLCOMMENT":{
        "prefix":"$TOLCOMMENT",
        "body":"\\$TOLCOMMENT(${1:operand})",
        "description":"Returns the comment for the specified tolerance operand"
    },
    "$TOLOPERAND":{
        "prefix":"$TOLOPERAND",
        "body":"\\$TOLOPERAND(${1:operand})",
        "description":"Operand name for the tolerance operand"
    },
    "$UNITS":{
        "prefix":"$UNITS",
        "body":"\\$UNITS()",
        "description":"Returns either MM, CM, IN, or M, depending upon the current lens units"
    },




    "BEEP":{
        "prefix":"BEEP",
        "body":"BEEP",
        "description":"Beeping"
    },
    "BROWSE":{
        "prefix":"BROWSE",
        "body":"BROWSE",
        "description":"Displays a window that prompts the user to select or enter a file name and populates a string variable with the chosen file path"
    },
    "CALLMACRO":{
        "prefix":"CALLMACRO",
        "body":"CALLMACRO ${1:filename}",
        "description":"Call another macro"
    },
    "CALLSETDBL":{
        "prefix":"CALLSETDBL",
        "body":"CALLSETDBL ${1:index}, ${2:value}",
        "description":"Set double precision floating point number to the buffer"
    },
    "CALLSETSTR":{
        "prefix":"CALLSETSTR",
        "body":"CALLSETSTR ${1:index}, ${2:text}",
        "description":"Set string to the buffer"
    },
    "CLOSE":{
        "prefix":"CLOSE",
        "body":"CLOSE",
        "description":"Close the file"
    },
    "CLOSEWINDOW":{
        "prefix":"CLOSEWINDOW",
        "body":"CLOSEWINDOW ${1:n}",
        "description":"Suppresses the display of the default output window"
    },
    "COLOR":{
        "prefix":"COLOR",
        "body":"COLOR ${1:n}",
        "description":"Set color to the current pen"
    },
    "COMMAND":{
        "prefix":"COMMAND",
        "body":"COMMAND ${1:exe}, ${2:arg}",
        "description":"Execute a shell command"
    },
    "CONVERTFILEFORMAT":{
        "prefix":"CONVERTFILEFORMAT",
        "body":"CONVERTFILEFORMAT",
        "description":"Converts a text file from ANSI to Unicode format or from Unicode to ANSI format"
    },
    "CONVERTIMAGETOGRID":{
        "prefix":"CONVERTIMAGETOGRID",
        "body":"CONVERTIMAGETOGRID",
        "description":"Converts monochromatic image files (.BMP, .JPG, .TIFF, .PNG, etc) to .DAT files that can be used with the Grid Phase surface"
    },
    "COPYFILE":{
        "prefix":"COPYFILE",
        "body":"COPYFILE ${1:src}, ${2:dst}",
        "description":"Copy file"
    },
    "DEFAULTMERIT":{
        "prefix":"DEFAULTMERIT",
        "body":"DEFAULTMERIT ${1:type}, ${2:data}, ${3:reference}, ${4:method}, ${5:rings}, ${6:arms}, ${7:grid}, ${8:delete}, ${9:axial}, ${10:lateral}, ${11:start}, ${12:xweight}, ${13:oweight}",
        "description":"Generate default merit function"
    },
    "DELETE":{
        "prefix":"DELETE",
        "body":"DELETE ${1:n}",
        "description":"Delete a surface from the spreadsheet"
    },
    "DELETECONFIG":{
        "prefix":"DELETECONFIG",
        "body":"DELETECONFIG ${1:conf}",
        "description":"Delete configuration from multi-configuration editor"
    },
    "DELETEFILE":{
        "prefix":"DELETEFILE",
        "body":"DELETEFILE ${1:filename}",
        "description":"Delete file"
    },
    "DELETEMCO":{
        "prefix":"DELETEMCO",
        "body":"DELETEMCO ${1:row}",
        "description":"Delete an operand in the multi-configuration editor"
    },
    "DELETEMFO":{
        "prefix":"DELETEMFO",
        "body":"DELETEMFO",
        "description":"Delete an operand in the merit function editor"
    },
    "DELETEOBJECT":{
        "prefix":"DELETEOBJECT",
        "body":"DELETEOBJECT ${1:surf}, ${2:obj}",
        "description":"Delete an NSC object"
    },
    "DELETETOL":{
        "prefix":"DELETETOL",
        "body":"DELETETOL ${1:row}",
        "description":"Delete an operand in the tolerance analysis editor"
    },
    "EXPORTBMP":{
        "prefix":"EXPORTBMP",
        "body":"EXPORTBMP ${1:win}, ${2:filename}, ${3:delay}",
        "description":"Export any graphic window as a BMP file"
    },
    "EXPORTCAD":{
        "prefix":"EXPORTCAD",
        "body":"EXPORTCAD ${1:filename}",
        "description":"Exports lens data as an IGES, STEP, SAT, or STL file for import into CAD programs"
    },
    "EXPORTJPG":{
        "prefix":"EXPORTJPG",
        "body":"EXPORTJPG ${1:win}, ${2:filename}, ${3:delay}",
        "description":"Export a graphic window to JPG file"
    },
    "EXPORTWMF":{
        "prefix":"EXPORTWMF",
        "body":"EXPORTWMF ${1:win}, ${2:filename}",
        "description":"Export a graphic window to WMF file"
    },
    "FINDFILE":{
        "prefix":"FINDFILE",
        "body":"FINDFILE ${1:temp}, ${2:filter}",
        "description":"Find the names of files"
    },
    "FORMAT":{
        "prefix":"FORMAT",
        "body":"FORMAT",
        "description":"Specifies the numerical precision format for subsequent PRINT and $STR commands"
    },
    "GDATE":{
        "prefix":"GDATE",
        "body":"GDATE",
        "description":"Insert the date under the lens name"
    },
    "GETEXTRADATA":{
        "prefix":"GETEXTRADATA",
        "body":"GETEXTRADATA ${1:vec}, ${2:surf}",
        "description":"Retrieves the extra data values loaded into the lens data editor"
    },
    "GETGLASSDATA":{
        "prefix":"GETGLASSDATA",
        "body":"GETGLASSDATA ${1:vec}, ${2:glass}",
        "description":"Retrieves the data for any glass in the current catalogs"
    },
    "GETLSF":{
        "prefix":"GETLSF",
        "body":"GETLSF ${1:wave}, ${2:field}, ${3:sampling}, ${4:vector}, ${5:maxradius}, ${6:polarization}",
        "description":"Calculates the geometric edge and line response functions"
    },
    "GETMTF":{
        "prefix":"GETMTF",
        "body":"GETMTF ${1:freq}, ${2:wave}, ${3:field}, ${4:sampling}, ${5:vector}, ${6:type}",
        "description":"Calculates tangential and sagittal MTF, real part, imaginary part, phase, or square wave response data for the currently loaded lens file, and places the data in one of the vector arrays"
    },
    "GETNSCMTF":{
        "prefix":"GETNSCMTF",
        "body":"GETNSCMTF ${1:freq}, ${2:surf}, ${3:object}",
        "description":"Calculate the X and Y direction geometric MTF in the non-sequential mode based on the spot diagram on Detector Rectangular"
    },
    "GETPSF":{
        "prefix":"GETPSF",
        "body":"GETPSF ${1:wave}, ${2:field}, ${3:sampling}, ${4:vector}, ${5:unnormalized}, ${6:phaseflag}, ${7:imagedelta}",
        "description":"Calculates the diffraction point spread function (PSF) using the FFT algorithm and places the data in one of the vector arrays"
    },
    "GETSYSTEMDATA":{
        "prefix":"GETSYSTEMDATA",
        "body":"GETSYSTEMDATA ${1:vec}",
        "description":"Retrieves most system specific data, such as effective focal length, working F/#, apodization factors, and other data not associated with any particular surface"
    },
    "GETTEXTFILE":{
        "prefix":"GETTEXTFILE",
        "body":"GETTEXTFILE ${1:textfile}, ${2:type}, ${3:settingsfile}, ${4:flag}",
        "description":"Creates a text file from any OpticStudio analysis window that supports text"
    },
    "GETVARDATA":{
        "prefix":"GETVARDATA",
        "body":"GETVARDATA ${1:vector}",
        "description":"Retrieves the current number, type, and value of all optimization variables"
    },
    "GETZERNIKE":{
        "prefix":"GETZERNIKE",
        "body":"GETZERNIKE ${1:maxorder}, ${2:wave}, ${3:field}, ${4:sampling}, ${5:vector}, ${6:zerntype}, ${7:epsilon}, ${8:reference}",
        "description":"Calculates Zernike Fringe, Standard, or Annular coefficients for the currently loaded lens file, and places them in one of the vector arrays"
    },
    "GLASSTEMPLATE":{
        "prefix":"GLASSTEMPLATE",
        "body":"GLASSTEMPLATE ${1:code}, ${2:data}",
        "description":"Sets data on the Glass Substitution Template"
    },
    "GLENSNAME":{
        "prefix":"GLENSNAME",
        "body":"GLENSNAME",
        "description":"Insert the current lens name on the left top of the textbox"
    },
    "GLOBALTOLOCAL":{
        "prefix":"GLOBALTOLOCAL",
        "body":"GLOBALTOLOCAL ${1:surf1}, ${2:surf2}, ${3:direction}",
        "description":"Converts coordinate breaks from global to local references."
    },
    "GRAPHICS":{
        "prefix":"GRAPHICS",
        "body":"GRAPHICS",
        "description":"Generate new graphic scheme"
    },
    "GTEXT":{
        "prefix":"GTEXT",
        "body":"GTEXT ${1:x}, ${2:y}, ${3:angle}, ${4:usertext}",
        "description":"Put user defined text to the graphics"
    },
    "GTEXTCENT":{
        "prefix":"GTEXTCENT",
        "body":"GTEXTCENT ${1:y}, ${2:user_text}",
        "description":"Align texts to the center"
    },
    "GTITLE":{
        "prefix":"GTITLE",
        "body":"GTITLE ${1:user_title}",
        "description":"Graphic title"
    },
    "HAMMER":{
        "prefix":"HAMMER",
        "body":"HAMMER",
        "description":"Invokes the Hammer optimization algorithm to optimize the current lens with the current merit function"
    },
    "IMA":{
        "prefix":"IMA",
        "body":"IMA ${1:outfile}, ${2:infile}",
        "description":"Image analysis"
    },
    "IMAGECOMBINE":{
        "prefix":"IMAGECOMBINE",
        "body":"IMAGECOMBINE ${1:src1}, ${2:src2}, ${3:dst}, ${4:mode}",
        "description":"Combine two images"
    },
    "IMAGEEXTRACT":{
        "prefix":"IMAGEEXTRACT",
        "body":"IMAGEEXTRACT ${1:src}, ${2:dst}, ${3:startx}, ${4:starty}, ${5:width}, ${6:height}",
        "description":"Extract rectangular region"
    },
    "IMASHOW":{
        "prefix":"IMASHOW",
        "body":"IMASHOW ${1:file}",
        "description":"Display IMA/BIM file on the viewer window"
    },
    "IMASUM":{
        "prefix":"IMASUM",
        "body":"IMASUM ${1:filename1}, ${2:filename2}, ${3:outfilename}",
        "description":"Summarize intensity"
    },
    "IMPORTEXTRADATA":{
        "prefix":"IMPORTEXTRADATA",
        "body":"IMPORTEXTRADATA ${1:surf}, ${2:filename}",
        "description":"Import to extra data editor"
    },
    "INPUT":{
        "prefix":"INPUT",
        "body":"INPUT",
        "description":"INPUT provides a means for prompting the user for numeric or text data when the macro is run."
    },
    "INSERT":{
        "prefix":"INSERT",
        "body":"INSERT ${1:surf}",
        "description":"Insert a surface"
    },
    "INSERTCONFIG":{
        "prefix":"INSERTCONFIG",
        "body":"INSERTCONFIG ${1:config}",
        "description":"Insert configuration to multi-configuration editor"
    },
    "INSERTMCO":{
        "prefix":"INSERTMCO",
        "body":"INSERTMCO ${1:row}",
        "description":"Insert operand to multi-configuration editor"
    },
    "INSERTMFO":{
        "prefix":"INSERTMFO",
        "body":"INSERTMFO ${1:row}",
        "description":"Insert operand to merit function editor"
    },
    "INSERTOBJECT":{
        "prefix":"INSERTOBJECT",
        "body":"INSERTOBJECT ${1:surf}, ${2:object}",
        "description":"Insert NSC object"
    },
    "INSERTTOL":{
        "prefix":"INSERTTOL",
        "body":"INSERTTOL ${1:row}",
        "description":"Insert operand to tolerance analysis editor"
    },
    "LINE":{
        "prefix":"LINE",
        "body":"LINE ${1:oldx}, ${2:oldy}, ${3:newx}, ${4:newy}",
        "description":"The primitive line drawing function for graphical displays."
    },
    "LOADARCHIVE":{
        "prefix":"LOADARCHIVE",
        "body":"LOADARCHIVE ${1:filename}, ${2:extractpath}",
        "description":"Opens an existing Zemax archive (*.ZAR) file."
    },
    "LOADCATALOG":{
        "prefix":"LOADCATALOG",
        "body":"LOADCATALOG",
        "description":"Reloads glass and coating catalogs for the currently loaded lens."
    },
    "LOADDETECTOR":{
        "prefix":"LOADDETECTOR",
        "body":"LOADDETECTOR ${1:surf}, ${2:object}, ${3:filename}",
        "description":"Loads the data saved in a file to an NSC Detector Rectangle, Detector Color, Detector Polar, or Detector Volume object."
    },
    "LOADLENS":{
        "prefix":"LOADLENS",
        "body":"LOADLENS ${1:filename}, ${2:appendflag}, ${3:session}",
        "description":"Loads a new lens file, replacing any lens file currently in memory."
    },
    "LOADMERIT":{
        "prefix":"LOADMERIT",
        "body":"LOADMERIT ${1:file}",
        "description":"Loads a merit function file, replacing the merit function in the current lens."
    },
    "LOADTOLERANCE":{
        "prefix":"LOADTOLERANCE",
        "body":"LOADTOLERANCE ${1:file}",
        "description":"Loads a tolerance file, replacing the tolerances in the current lens."
    },
    "LOCALTOGLOBAL":{
        "prefix":"LOCALTOGLOBAL",
        "body":"LOCALTOGLOBAL ${1:surf1}, ${2:surf2}, ${3:reference}",
        "description":"Converts coordinate breaks from local to global references."
    },
    "LOCKWINDOW":{
        "prefix":"LOCKWINDOW",
        "body":"LOCKWINDOW ${1:winnum}",
        "description":"Locks any one or all open windows."
    },
    "MAKEFACETLIST":{
        "prefix":"MAKEFACETLIST",
        "body":"MAKEFACETLIST ${1:in}, ${2:out}",
        "description":"Makes an ASCI listing of the vertices of a faceted description of any importable CAD file."
    },
    "MAKEFOLDER":{
        "prefix":"MAKEFOLDER",
        "body":"MAKEFOLDER ${1:path}",
        "description":"Makes a folder for files."
    },
    "MODIFYSETTINGS":{
        "prefix":"MODIFYSETTINGS",
        "body":"MODIFYSETTINGS ${1:settingfile}, ${2:type}, ${3:value}",
        "description":"Modifies data within the settings files used by GETTEXTFILE."
    },
    "NSLT":{
        "prefix":"NSLT",
        "body":"NSLT ${1:surf}, ${2:source}, ${3:ray_sampling}, ${4:edge_sampling}",
        "description":"Initiates a Non-sequential LightningTrace."
    },
    "NSTR":{
        "prefix":"NSTR",
        "body":"NSTR ${1:surf}, ${2:source}, ${3:split}, ${4:scatter}, ${5:usepolar}, ${6:ignore_errors}, ${7:random_seed}, ${8:save}, ${9:savefilename}, ${10:filter}",
        "description":"Initiates a Non-sequential trace."
    },
    "OPEN":{
        "prefix":"OPEN",
        "body":"OPEN ${1:file}",
        "description":"Opens an existing text file for reading by the READ command."
    },
    "OPENANALYSISWINDOW":{
        "prefix":"OPENANALYSISWINDOW",
        "body":"OPENANALYSISWINDOW ${1:type}, ${2:settingsfilename}",
        "description":"Opens a new analysis window."
    },
    "OPTIMIZE":{
        "prefix":"OPTIMIZE",
        "body":"OPTIMIZE",
        "description":"Invokes the optimization algorithm to optimize the current lens with the current merit function."
    },
    "OPTRETURN":{
        "prefix":"OPTRETURN",
        "body":"OPTRETURN ${1:datafield}, ${2:result}",
        "description":"Return value to optimization using ZPLM"
    },
    "OUTPUT":{
        "prefix":"OUTPUT",
        "body":"OUTPUT",
        "description":"Specifies destination for text output. Output is either to the screen, or to a file."
    },
    "PARAXIAL":{
        "prefix":"PARAXIAL",
        "body":"PARAXIAL ${1|ON,OFF|}",
        "description":"Used to control whether ray tracing is done with paraxial or real rays."
    },
    "PAUSE":{
        "prefix":"PAUSE",
        "body":"PAUSE",
        "description":"Pauses macro execution, optionally while displaying a status message."
    },
    "PIXEL":{
        "prefix":"PIXEL",
        "body":"PIXEL ${1:xcoord}, ${2:ycoord}",
        "description":"Turns on a single pixel on the current graphics screen."
    },
    "PLOT":{
        "prefix":"PLOT",
        "body":"PLOT ${1|NEW,TITLE,TITLEX,TITLEY,BANNER,WINASPECT,COMM1,COMM2,COMM3,COMM4,COMM5,RANGEX,RANGEY,CHECK,TICK,FORMATX,FORMATY,DATA,LINE,LABEL|}",
        "description":"The PLOT keyword supports a number of arguments used to simplify the task of creating plots of numeric data."
    },
    "PLOT2D":{
        "prefix":"PLOT2D",
        "body":"PLOT2D ${1|NEW,TITLE,COMM1,COMM2,COMM3,COMM4,COMM5,RANGE,ASPECT,WINASPECT,DATA,ACTIVECURSOR,DISPLAYTYPE,CONTOURINTERVAL,SURFACESCALE,LOGPLOT,HIDEADDRESS,CONFIG,GO|}",
        "description":"The PLOT2D keyword supports a number of arguments used to simplify the task of creating plots of numeric data."
    },
    "POLDEFINE":{
        "prefix":"POLDEFINE",
        "body":"POLDEFINE ${1:Jx}, ${2:Jy}, ${3:PhaX}, ${4:PhaY}",
        "description":"Defines the input polarization state for subsequent POLTRACE calls."
    },
    "POLTRACE":{
        "prefix":"POLTRACE",
        "body":"POLTRACE ${1:Hx}, ${2:Hy}, ${3:Px}, ${4:Py}, ${5:wavelength}, ${6:vec}, ${7:surf}",
        "description":"Calls the OpticStudio polarization ray tracing routines to trace a particular ray through the current system."
    },
    "POP":{
        "prefix":"POP",
        "body":"POP ${1:outfilename}, ${2:lastsurface}",
        "description":"Physical optics propagation"
    },
    "PRINT":{
        "prefix":"PRINT",
        "body":"PRINT",
        "description":"Output constant text and variable data to either the screen or a file, depending upon the current status of the keyword OUTPUT."
    },
    "PRINTFILE":{
        "prefix":"PRINTFILE",
        "body":"PRINTFILE",
        "description":"Prints a text file."
    },
    "PRINTWINDOW":{
        "prefix":"PRINTWINDOW",
        "body":"PRINTWINDOW ${1:winnum}",
        "description":"Prints any open graphic or text window."
    },
    "QUICKFOCUS":{
        "prefix":"QUICKFOCUS",
        "body":"QUICKFOCUS ${1:mode}, ${2:centroid}",
        "description":"Focus by adjusting space before image plane"
    },
    "RANDOMIZE":{
        "prefix":"RANDOMIZE",
        "body":"RANDOMIZE ${1:seed}",
        "description":"Seeds the random number generator."
    },
    "RAYGENERATOR":{
        "prefix":"RAYGENERATOR",
        "body":"RAYGENERATOR ${1:rsmxf_ile}, ${2:ray_file}, ${3:num_rays}, ${4:min_azimuth}, ${5:max_azimuth}, ${6:min_inclination}, ${7:max_inclination}, ${8:origination_method}, ${9:origination_radius}, ${10:spectrum_type}, ${11:arg1}, ${12:arg2}, ${13:arg3}",
        "description":"Runs the ray generator, which is used to create a source ray file from a Radiant Source ModelTM file."
    },
    "RAYTRACE":{
        "prefix":"RAYTRACE",
        "body":"RAYTRACE ${1:hx}, ${2:hy}, ${3:px}, ${4:py}, ${5:wavelength}",
        "description":"Calls the OpticStudio ray tracing routines to trace a particular ray through the current system."
    },
    "RAYTRACEX":{
        "prefix":"RAYTRACEX",
        "body":"RAYTRACEX ${1:x}, ${2:y}, ${3:z}, ${4:l}, ${5:m}, ${6:n}, ${7:surf}, ${8:wavelength}",
        "description":"Calls the OpticStudio ray tracing routines to trace a particular ray from any starting surface through the current system."
    },
    "READ":{
        "prefix":"READ",
        "body":"READ",
        "description":"Reads data from an existing text file opened for reading by the OPEN command."
    },
    "READ_LOCALE":{
        "prefix":"READ_LOCALE",
        "body":"READ_LOCALE",
        "description":"Reads data from an existing text file opened for reading by the OPEN command."
    },
    "READNEXT_LOCALE":{
        "prefix":"READNEXT_LOCALE",
        "body":"READNEXT_LOCALE",
        "description":"Reads data from an existing text file opened for reading by the OPEN command."
    },
    "READNEXT":{
        "prefix":"READNEXT",
        "body":"READNEXT",
        "description":"Reads data from an existing text file opened for reading by the OPEN command."
    },
    "READSKIP":{
        "prefix":"READSKIP",
        "body":"READSKIP ${1:n}",
        "description":"Reads any number of unwanted characters from an existing text file opened for reading by the OPEN command."
    },
    "READSTRING":{
        "prefix":"READSTRING",
        "body":"READSTRING ${1:str}",
        "description":"Reads data from an existing text file opened for reading by the OPEN command."
    },
    "RELEASE":{
        "prefix":"RELEASE",
        "body":"RELEASE",
        "description":""
    },
    "RELOADOBJECTS":{
        "prefix":"RELOADOBJECTS",
        "body":"RELOADOBJECTS ${1:surface}, ${2:object}",
        "description":"Reloads NSC objects into the NSC Editor."
    },
    "REMOVEVARIABLES":{
        "prefix":"REMOVEVARIABLES",
        "body":"REMOVEVARIABLES",
        "description":"Sets all currently defined variables to fixed status."
    },
    "RESUMEUPDATES":{
        "prefix":"RESUMEUPDATES",
        "body":"RESUMEUPDATES",
        "description":"Prevents any UI editor windows from being updated by ZPL commands while suspended, and RESUMEUPDATES ends the suspension."
    },
    "RENAMEFILE":{
        "prefix":"RENAMEFILE",
        "body":"RENAMEFILE ${1:oldfilename}, ${2:newfilename}",
        "description":"Rename a file."
    },
    "RETURN":{
        "prefix":"RETURN",
        "body":"RETURN",
        "description":""
    },
    "REWIND":{
        "prefix":"REWIND",
        "body":"REWIND",
        "description":"Erases the last line printed by the PRINT command, up to the previous end of line."
    },
    "SAVEARCHIVE":{
        "prefix":"SAVEARCHIVE",
        "body":"SAVEARCHIVE ${1:filename}",
        "description":"Saves the current lens to a Zemax archive (*.ZAR) file."
    },
    "SAVEDETECTOR":{
        "prefix":"SAVEDETECTOR",
        "body":"SAVEDETECTOR ${1:filename}",
        "description":"Saves the data currently on an NSC Detector Rectangle, Detector Color, Detector Polar, or Detector Volume object to a file."
    },
    "SAVELENS":{
        "prefix":"SAVELENS",
        "body":"SAVELENS ${1:filename}, ${2:session}",
        "description":"Saves the current lens file."
    },
    "SAVEMERIT":{
        "prefix":"SAVEMERIT",
        "body":"SAVEMERIT ${1:filename}",
        "description":"Saves the current merit function to a file."
    },
    "SAVETOLERANCE":{
        "prefix":"SAVETOLERANCE",
        "body":"SAVETOLERANCE ${1:file}",
        "description":"Saves the current tolerances to a file."
    },
    "SAVEWINDOW":{
        "prefix":"SAVEWINDOW",
        "body":"SAVEWINDOW ${1:winname}, ${2:filename}",
        "description":"Saves the text from any text window to a file."
    },
    "SCATTER":{
        "prefix":"SCATTER",
        "body":"SCATTER ${1|ON,OFF|}",
        "description":"Used to control whether sequential surface scattering is done while tracing rays."
    },
    "SETAIM":{
        "prefix":"SETAIM",
        "body":"SETAIM ${1:state}",
        "description":"Set the state of the ray aiming function"
    },
    "SETAIMDATA":{
        "prefix":"SETAIMDATA",
        "body":"SETAIMDATA ${1:code}, ${2:value}",
        "description":"Sets various data for the ray aiming function"
    },
    "SETCONFIG":{
        "prefix":"SETCONFIG",
        "body":"SETCONFIG ${1:config}",
        "description":"Sets the current configuration for multi-configuration (zoom) systems."
    },
    "SETDETECTOR":{
        "prefix":"SETDETECTOR",
        "body":"SETDETECTOR ${1:surf}, ${2:object}, ${3:pixel}, ${4:datatype}, ${5:value}",
        "description":"Sets the coherent or incoherent detector data for any pixel on a detector rectangle object."
    },
    "SETMCOPERAND":{
        "prefix":"SETMCOPERAND",
        "body":"SETMCOPERAND ${1:row}, ${2:config}, ${3:value}, ${4:datatype}",
        "description":"Sets any row or configuration of the Multi-Configuration Editor to any numeric value."
    },
    "SETNSCPARAMETER":{
        "prefix":"SETNSCPARAMETER",
        "body":"SETNSCPARAMETER ${1:surface}, ${2:object}, ${3:parameter}, ${4:value}",
        "description":"Sets the parameter values of any object in the NSC editor."
    },
    "SETNSCPOSITION":{
        "prefix":"SETNSCPOSITION",
        "body":"SETNSCPOSITION ${1:surface}, ${2:object}, ${3:code}, ${4:value}",
        "description":"Sets the x, y, z or tilt x, tilt y, tilt z position of any object in the NSC editor."
    },
    "SETNSCPROPERTY":{
        "prefix":"SETNSCPROPERTY",
        "body":"SETNSCPROPERTY ${1:surface}, ${2:object}, ${3:code}, ${4:face}, ${5:value}",
        "description":"Sets properties of NSC objects."
    },
    "SETOPERAND":{
        "prefix":"SETOPERAND",
        "body":"SETOPERAND ${1:row}, ${2:col}, ${3:value}",
        "description":"Sets any row or column of the Merit Function Editor to any numeric value."
    },
    "SETSURFACEPROPERTY":{
        "prefix":"SETSURFACEPROPERTY",
        "body":"SETSURFACEPROPERTY ${1:surface}, ${2:code}, ${3:value1}, ${4:value2}",
        "description":"Sets properties of surfaces."
    },
    "SETSYSTEMPROPERTY":{
        "prefix":"SETSYSTEMPROPERTY",
        "body":"SETSYSTEMPROPERTY ${1:code}, ${2:value1}, ${3:value2}",
        "description":"Sets properties of the system, such as system aperture, field, wavelength, and other data."
    },
    "SETTEXTSIZE":{
        "prefix":"SETTEXTSIZE",
        "body":"SETTEXTSIZE ${1:xsize}, ${2:ysize}",
        "description":"Changes the size of the characters drawn by the GTEXT command."
    },
    "SETTOL":{
        "prefix":"SETTOL",
        "body":"SETTOL ${1:row}, ${2:col}, ${3:data}",
        "description":"Sets the data in the various columns for any tolerance operand in the tolerance data editor."
    },
    "SETVAR":{
        "prefix":"SETVAR",
        "body":"SETVAR",
        "description":"Changes the state of variables for optimization."
    },
    "SETVECSIZE":{
        "prefix":"SETVECSIZE",
        "body":"SETVECSIZE ${1:n}",
        "description":"Changes the maximum size of the VEC1, VEC2, VEC3, and VEC4 arrays."
    },
    "SETVIG":{
        "prefix":"SETVIG",
        "body":"SETVIG",
        "description":"Set the vignetting factors"
    },
    "SHOWBITMAP":{
        "prefix":"SHOWBITMAP",
        "body":"SHOWBITMAP ${1:filename}",
        "description":"Displays a BMP, JPG or PNG file in a viewer window."
    },
    "SHOWFILE":{
        "prefix":"SHOWFILE",
        "body":"SHOWFILE ${1:filename}, ${2:saveflag}",
        "description":"Displays a text file to the screen using the OpticStudio file viewer."
    },
    "SOLVEBEFORESTOP":{
        "prefix":"SOLVEBEFORESTOP",
        "body":"SOLVEBEFORESTOP",
        "description":"Enables ZPL solves to be placed on surfaces prior to the stop surface."
    },
    "SOLVERETURN":{
        "prefix":"SOLVERETURN",
        "body":"SOLVERETURN ${1:x}",
        "description":"Returns a computed solve value back to the editor calling the solve."
    },
    "SOLVETYPE":{
        "prefix":"SOLVETYPE",
        "body":"SOLVETYPE ${1:surf}, ${2:CODE}, ${3:arg1-4}",
        "description":"Changes the solve status on a given surface and value. "
    },
    "STOPSURF":{
        "prefix":"STOPSURF",
        "body":"STOPSURF ${1:surf}",
        "description":"Set stop position"
    },
    "SUSPENDUPDATES":{
        "prefix":"SUSPENDUPDATES",
        "body":"SUSPENDUPDATES",
        "description":"Prevents any UI editor windows from being updated by ZPL commands while suspended."
    },
    "TESTPLATEFIT":{
        "prefix":"TESTPLATEFIT",
        "body":"TESTPLATEFIT ${1:tpd_file}, ${2:log_file}, ${3:method}, ${4:number_cycles}",
        "description":"Calls the test plate fitting routine."
    },
    "TIMER":{
        "prefix":"TIMER",
        "body":"TIMER",
        "description":"Resets the internal clock."
    },
    "TOLERANCE":{
        "prefix":"TOLERANCE",
        "body":"TOLERANCE ${1:topfile}, ${2:outfile}",
        "description":"Runs a tolerance analysis and saves the tolerance report to a text file."
    },
    "UNLOCKWINDOW":{
        "prefix":"UNLOCKWINDOW",
        "body":"UNLOCKWINDOW ${1:winnum}",
        "description":"Unlocks any one or all locked windows."
    },
    "UPDATE":{
        "prefix":"UPDATE",
        "body":"UPDATE",
        "description":"Updates data required for both sequential and non-sequential ray tracing."
    },
    "XDIFFIA":{
        "prefix":"XDIFFIA",
        "body":"XDIFFIA ${1:outfile}, ${2:infile}",
        "description":"Computes the Extended Diffraction Image Analysis feature and saves the result to a ZBF file. "
    },
    "ZBF2MAT":{
        "prefix":"ZBF2MAT",
        "body":"ZBF2MAT ${1:zbffile}, ${2:matfile}, ${3:surfacerange}, ${4:int1}, ${5:int2}",
        "description":"Converts a ZBF file to a Matlab MAT file."
    },
    "ZBFCLR":{
        "prefix":"ZBFCLR",
        "body":"ZBFCLR ${1:filename}",
        "description":"Clears the complex amplitude data in a ZBF file."
    },
    "ZBFMULT":{
        "prefix":"ZBFMULT",
        "body":"ZBFMULT ${1:filename}, ${2:Ax}, ${3:Bx}, ${4:Ay}, ${5:By}",
        "description":"Multiplies the complex amplitude data in a ZBF file by a complex factor."
    },
    "ZBFPROPERTIES":{
        "prefix":"ZBFPROPERTIES",
        "body":"ZBFPROPERTIES ${1:filename}, ${2:vector}",
        "description":"Opens the specified ZBF file and places various data about the beam in a vector variable."
    },
    "ZBFREAD":{
        "prefix":"ZBFREAD",
        "body":"ZBFREAD ${1:file}, ${2:beam}, ${3:property}",
        "description":"Opens the specified ZBF file and places the electric field and beam property data in two user- defined array variables."
    },
    "ZBFRESAMPLE":{
        "prefix":"ZBFRESAMPLE",
        "body":"ZBFRESAMPLE ${1:filename}, ${2:nx}, ${3:ny}, ${4:wx}, ${5:wy}, ${6:decenterx}, ${7:decentery}",
        "description":"Resamples a ZBF file to a new width and point spacing."
    },
    "ZBFSHOW":{
        "prefix":"ZBFSHOW",
        "body":"ZBFSHOW ${1:filename}",
        "description":"Displays a ZBF file in a viewer window."
    },
    "ZBFSUM":{
        "prefix":"ZBFSUM",
        "body":"ZBFSUM ${1:coherent}, ${2:filename1}, ${3:filename2}, ${4:outfilename}",
        "description":"Sums either coherently or incoherently the data in two ZBF files and places the resulting data in a third ZBF file."
    },
    "ZBFTILT":{
        "prefix":"ZBFTILT",
        "body":"ZBFTILT ${1:filename}, ${2:cx}, ${3:cy}, ${4:tx}, ${5:ty}",
        "description":"Multiplies the data in a ZBF file by a complex phase factor to introduce phase tilt to the beam."
    },
    "ZBFWRITE":{
        "prefix":"ZBFWRITE",
        "body":"ZBFWRITE ${1:file}, ${2:beam}, ${3:property}",
        "description":"Writes electric field and beam property data arrays to a ZBF file."
    },
    "ZRD2MAT":{
        "prefix":"ZRD2MAT",
        "body":"ZRD2MAT ${1:zrdfile}, ${2:matfile}, ${3:savesegment}, ${4:int1}, ${5:int2}",
        "description":"Converts a ZRD file to a Matlab MAT file."
    },
    "ZRDAPPEND":{
        "prefix":"ZRDAPPEND",
        "body":"ZRDAPPEND ${1:infile}, ${2:outfile}",
        "description":"Appends data from one ZRD file onto the end of a second file. "
    },
    "ZRDFILTER":{
        "prefix":"ZRDFILTER",
        "body":"ZRDFILTER ${1:infile}, ${2:outfile}, ${3:filter}",
        "description":"Opens a ZRD ray database file, applies a filter, and saves the filtered subset of rays to a new ZRD file."
    },
    "ZRDPLAYBACK":{
        "prefix": "ZRDPLAYBACK",
        "body":"ZRDPLAYBACK ${1:zrdfilename}, ${2:surface}, ${3:detector}, ${4:clear}, ${5: filtering}",
        "description":"This keyword reads a ZRD file, and adds ray amplitude data to one or all detectors."
    },
    "ZRDSAVERAYS":{
        "prefix":"ZRDSAVERAYS",
        "body":"ZRDSAVERAYS ${1:infile}, ${2:outfile}, ${3:filter}, ${4:object}",
        "description":"Opens a ZRD ray database file, applies a filter, and saves the rays in the filtered subset that intersect a specified object number."
    },
    "ZRDSUM":{
        "prefix":"ZRDSUM",
        "body":"ZRDSUM ${1:infile1}, ${2:infile2}, ${3:outfile}",
        "description":"Concatenates two ZRD files into a third file."
    }
    
}
